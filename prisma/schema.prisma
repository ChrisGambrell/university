datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  stripe_customer_id String? @unique
}

enum PriceInterval {
  day
  week
  month
  year
}

enum PriceType {
  one_time
  recurring
}

model Price {
  id         String   @id
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_id        String?
  active            Boolean?
  unit_amount       BigInt?
  currency          String?
  type              PriceType?
  interval          PriceInterval?
  interval_count    Int?
  trial_period_days Int?

  product       Product?       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model Product {
  id         String   @id
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?

  prices Price[]
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}

model Subscription {
  id         String   @id
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  price_id             String?
  user_id              String?
  status               SubscriptionStatus?
  metadata             Json?
  quantity             Int?
  cancel_at_period_end Boolean?
  created              DateTime
  current_period_start DateTime
  current_period_end   DateTime
  ended_at             DateTime?
  cancel_at            DateTime?
  canceled_at          DateTime?
  trial_start          DateTime?
  trial_end            DateTime?

  price Price? @relation(fields: [price_id], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String?
  email String  @unique
  image String?

  billing_address Json?
  payment_method  Json?

  emailVerified DateTime?
  passwordHash  String?

  subscriptions Subscription[]

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
